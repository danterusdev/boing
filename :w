use std::{error::Error, io::stdout, process::exit};

use crossterm::{event::{read, Event, KeyCode, KeyEvent}, terminal::{enable_raw_mode, size, Clear, ClearType}, execute, style::{Print, SetForegroundColor, Color}};

fn main() -> Result<(), Box<dyn Error>>{
    enable_raw_mode()?;

    let mut size = size()?;
    let mut buffer = String::new();

    loop {
        let event = read()?;
        if event == Event::Key(KeyCode::Esc.into()) {
            exit(0);
        }

        if let Event::Resize(width, height) = event {
            size = (width, height);
        }

        if let Event::Key(KeyEvent {code, char}) = event {
            buffer += code.
        }

        execute!(stdout(), Clear(ClearType::All))?;
        execute!(stdout(), SetForegroundColor(Color::Red), Print("test"))?;
    }
}
